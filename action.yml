name: 'Claude Code GitHub Action'
description: 'Integrates Claude Code with GitHub for automated code changes based on GitHub Issues'
author: 'karsonenns'
branding:
  icon: 'code'
  color: 'purple'

inputs:
  # Renamed from model-id for clarity
  anthropic-model-id:
    description: 'Claude model ID to use (e.g., anthropic.claude-3-sonnet-20240229-v1:0)'
    required: false
    default: 'anthropic.claude-3-sonnet-20240229-v1:0' # Updated default
  allowed-tools:
    description: 'Tools to allow Claude Code to use (e.g., Bash(git diff:*) Edit)'
    required: false
    default: 'Bash(git diff:*) Bash(git log:*) Edit'
  issue-number:
    description: 'The issue number to process'
    required: true
  issue-body:
    description: 'The body content of the issue'
    required: true
  issue-title:
    description: 'The title of the issue'
    required: true
  branch-name:
    description: 'The base name for the branch to create (will be appended with -<issue-number>)'
    required: false
    default: 'claude-code/issue'
  base-branch:
    description: 'The base branch to create the PR against'
    required: false
    default: 'main'

outputs:
  pr-number:
    description: 'The number of the created PR'
    value: ${{ steps.create-pr.outputs.pr-number }}
  summary:
    description: 'Summary of changes made by Claude Code'
    value: ${{ steps.run-claude.outputs.summary }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4 # Updated version
      with:
        node-version: '20' # Updated version

    - name: Install Claude Code CLI
      shell: bash
      run: npm install -g @anthropic-ai/claude-code

    # Issue mode steps (now the only mode)
    - name: Create branch for changes
      id: branch
      shell: bash
      run: |
        set -e # Exit immediately if a command exits with a non-zero status.
        BASE_BRANCH_NAME="${{ inputs.branch-name }}"
        ISSUE_NUMBER="${{ inputs.issue-number }}"
        BRANCH_NAME="${BASE_BRANCH_NAME}-${ISSUE_NUMBER}"
        # Check if branch already exists locally or remotely
        if git show-ref --verify --quiet refs/heads/$BRANCH_NAME || git ls-remote --exit-code --heads origin $BRANCH_NAME; then
          echo "Branch $BRANCH_NAME already exists. Checking it out."
          git checkout $BRANCH_NAME
          # Optional: Reset to base branch if needed, depending on desired behavior
          # git reset --hard origin/${{ inputs.base-branch }}
          # git pull origin $BRANCH_NAME # Ensure local branch is up-to-date
        else
          echo "Creating new branch $BRANCH_NAME"
          git checkout -b $BRANCH_NAME origin/${{ inputs.base-branch }}
        fi
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Run Claude Code for issue
      id: run-claude
      shell: bash
      env:
        # ANTHROPIC_API_KEY must be provided in the environment
        ANTHROPIC_API_KEY: ${{ env.ANTHROPIC_API_KEY }}
        ANTHROPIC_MODEL: ${{ inputs.anthropic-model-id }}
        # Setting directly in env rather than CLI flag
        CLAUDE_ALLOWED_TOOLS: ${{ inputs.allowed-tools }}
        DISABLE_PROMPT_CACHING: "1"
      run: |
        set -e
        # Extract issue content as prompt
        # Using environment variables for multiline safety
        export ISSUE_BODY='${{ inputs.issue-body }}'

        PROMPT=$(cat <<EOF
        ${ISSUE_BODY}

        After making the changes, please provide a summary of what you did in the following format:

        ---SUMMARY---
        [Your summary of changes here, including what files were modified and what changes were made]
        ---END SUMMARY---
        EOF
        )

        # Run Claude Code and request a summary
        # Note: Removed --allowedTools flag, relying on CLAUDE_ALLOWED_TOOLS env var
        claude -p "$PROMPT" > claude_output.txt

        # Check if any changes were made
        if [[ -n $(git status --porcelain) ]]; then
          echo "Changes detected, proceeding with commit"

          # Extract Claude's summary
          if grep -q -- "---SUMMARY---" claude_output.txt; then
            SUMMARY=$(sed -n '/---SUMMARY---/,/---END SUMMARY---/p' claude_output.txt | grep -v -- "---SUMMARY---" | grep -v -- "---END SUMMARY---")
            # Correct way to output multiline strings
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            echo "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            export CLAUDE_SUMMARY="$SUMMARY" # Export for commit message
          else
            echo "No summary found in Claude's output"
            echo "summary=Changes were made by Claude Code based on the issue description." >> $GITHUB_OUTPUT
            export CLAUDE_SUMMARY="Automated changes by Claude Code" # Default summary for commit
          fi
        else
          echo "No changes detected, exiting job."
          # Use GitHub Actions command to signal skip
          echo "::set-output name=no_changes::true"
          exit 0 # Exit successfully as no work needed
        fi

    - name: Commit changes for issue
      # Only run if run-claude did not exit early
      if: steps.run-claude.outputs.no_changes != 'true'
      shell: bash
      run: |
        set -e
        git config --global user.name "Claude Code Bot"
        git config --global user.email "claude-code-bot@users.noreply.github.com" # Use noreply address
        git add .
        # Use a more informative commit message including the summary if available
        COMMIT_TITLE="feat: Apply Claude changes for issue #${{ inputs.issue-number }}"
        COMMIT_BODY="Issue: #${{ inputs.issue-number}}: ${{ inputs.issue-title }}\n\n${CLAUDE_SUMMARY:-Automated changes by Claude Code}"
        git commit -m "$COMMIT_TITLE" -m "$COMMIT_BODY"

        # Use GITHUB_TOKEN for authentication
        git remote set-url origin https://x-access-token:${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        # Force push might be needed if branch existed and was potentially reset
        git push --force origin ${{ steps.branch.outputs.branch-name }}

    - name: Create or Update Pull Request
      # Only run if run-claude did not exit early
      if: steps.run-claude.outputs.no_changes != 'true'
      id: create-pr
      uses: actions/github-script@v7 # Updated version
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          const headBranch = '${{ steps.branch.outputs.branch-name }}';
          const baseBranch = '${{ inputs.base-branch }}';
          const issueNumber = ${{ inputs.issue-number }};
          const issueTitle = '${{ inputs.issue-title }}'.replace(/'/g, "\\'"); // Escape single quotes
          const issueBody = `${{ inputs.issue-body }}`.replace(/`/g, '\\`'); // Escape backticks for markdown code blocks
          const claudeSummary = `${{ steps.run-claude.outputs.summary }}`.replace(/`/g, '\\`'); // Escape backticks

          const prTitle = `Claude Code: Apply changes for Issue #${issueNumber}: ${issueTitle}`;
          const prBody = `
          ## Action Summary

          This PR automatically applies code changes requested in issue #${issueNumber}.

          ### Claude's Summary of Changes

          \`\`\`
          ${claudeSummary || 'No summary provided by Claude.'}
          \`\`\`

          ---
          ### Original Issue Request (#${issueNumber})

          \`\`\`
          ${issueBody}
          \`\`\`

          ---
          *Changes implemented by Claude Code via the [claude-code-github-action](https://github.com/marketplace/actions/claude-code-github-integration).*
          `;

          // Check if a PR already exists for this branch
          const { data: existingPRs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            head: `${context.repo.owner}:${headBranch}`,
            base: baseBranch,
          });

          if (existingPRs.length > 0) {
            // Update existing PR
            const prNumber = existingPRs[0].number;
            console.log(`Updating existing PR #${prNumber}`);
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              title: prTitle,
              body: prBody,
            });
            core.setOutput('pr-number', prNumber);

            // Add a comment indicating an update
             await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber, // Comment on the PR itself
                body: `✅ Code updated based on the latest changes pushed by the Claude Code action.`
              });

          } else {
            // Create new PR
            console.log(`Creating new PR for branch ${headBranch}`);
            const { data: newPR } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              body: prBody,
              head: headBranch,
              base: baseBranch,
            });
            core.setOutput('pr-number', newPR.number);

            // Comment on the original issue with the PR link
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `✅ Created PR #${newPR.number} with the requested changes: ${newPR.html_url}`
            });
          }
